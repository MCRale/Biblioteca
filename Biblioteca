# libro.py
class Libro:
    def __init__(self, titulo, autor, categoria, ISBN):
        self._titulo = titulo
        self._autor = autor
        self._categoria = categoria
        self._ISBN = ISBN

    # Getters y setters
    def get_titulo(self):
        return self._titulo

    def set_titulo(self, titulo):
        self._titulo = titulo

    def get_autor(self):
        return self._autor

    def set_autor(self, autor):
        self._autor = autor

    def get_categoria(self):
        return self._categoria

    def set_categoria(self, categoria):
        self._categoria = categoria

    def get_ISBN(self):
        return self._ISBN

# usuario.py
class Usuario:
    def __init__(self, nombre, id_usuario):
        self._nombre = nombre
        self._id_usuario = id_usuario
        self._libros_prestados = []

    def añadir_libro(self, libro):
        self._libros_prestados.append(libro)

    def eliminar_libro(self, libro):
        self._libros_prestados.remove(libro)

    # Getters y setters
    def get_nombre(self):
        return self._nombre

    def set_nombre(self, nombre):
        self._nombre = nombre

    def get_id_usuario(self):
        return self._id_usuario

# biblioteca.py
class Biblioteca:
    def __init__(self):
        self._libros = {}
        self._usuarios = set()

    def añadir_libro(self, libro):
        if libro.get_ISBN() in self._libros:
            raise ValueError("El libro ya está en la biblioteca.")
        self._libros[libro.get_ISBN()] = libro

    def quitar_libro(self, ISBN):
        if ISBN in self._libros:
            del self._libros[ISBN]
        else:
            raise ValueError("El libro no existe.")

    def registrar_usuario(self, usuario):
        if usuario.get_id_usuario() in self._usuarios:
            raise ValueError("El usuario ya está registrado.")
        self._usuarios.add(usuario.get_id_usuario())

    def baja_usuario(self, id_usuario):
        if id_usuario in self._usuarios:
            self._usuarios.remove(id_usuario)
        else:
            raise ValueError("El usuario no existe.")

    def prestar_libro(self, ISBN, id_usuario):
        if ISBN not in self._libros:
            raise ValueError("El libro no está disponible.")
        if id_usuario not in self._usuarios:
            raise ValueError("El usuario no está registrado.")
        # Aquí se debería buscar el objeto Usuario por su ID y añadir el libro a su lista de prestados

    def devolver_libro(self, ISBN, id_usuario):
        if ISBN not in self._libros:
            raise ValueError("El libro no está en el inventario.")
        if id_usuario not in self._usuarios:
            raise ValueError("El usuario no está registrado.")
        # Aquí se debería buscar el objeto Usuario por su ID y eliminar el libro de su lista de prestados

    def buscar_libro(self, criterio):
        resultados = []
        for libro in self._libros.values():
            if (criterio.lower() in libro.get_titulo().lower() or
                criterio.lower() in libro.get_autor().lower() or
                criterio.lower() in libro.get_categoria().lower()):
                resultados.append(libro)
        return resultados

    def listar_libros_prestados(self, id_usuario):
        if id_usuario not in self._usuarios:
            raise ValueError("El usuario no está registrado.")
        # Aquí se debería buscar el objeto Usuario por su ID y devolver su lista de libros prestados
